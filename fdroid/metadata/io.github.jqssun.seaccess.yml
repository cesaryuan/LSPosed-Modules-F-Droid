AuthorName: jqssun
Categories:
    - Xposed
CurrentVersion: 0.0.1
CurrentVersionCode: 1
Description: "<h1>Secure Element Access</h1>\n<p><a href=\"https://github.com/jqssun/android-se-access/stargazers\"><img src=\"https://img.shields.io/github/stars/jqssun/android-se-access\" alt=\"Stars\" /></a>\n<a href=\"https://github.com/Xposed-Modules-Repo/io.github.jqssun.seaccess/releases\"><img src=\"https://img.shields.io/github/downloads/Xposed-Modules-Repo/io.github.jqssun.seaccess/total?label=LSPosed&amp;logo=Android&amp;style=flat&amp;labelColor=F48FB1&amp;logoColor=ffffff\" alt=\"LSPosed\" /></a>\n<a href=\"https://github.com/jqssun/android-se-access/releases\"><img src=\"https://img.shields.io/github/downloads/jqssun/android-se-access/total?label=GitHub&amp;logo=GitHub\" alt=\"GitHub\" /></a>\n<a href=\"https://github.com/jqssun/android-se-access/releases\"><img src=\"https://img.shields.io/github/v/release/jqssun/android-se-access\" alt=\"release\" /></a>\n<a href=\"https://github.com/jqssun/android-se-access/actions/workflows/apk.yml\"><img src=\"https://img.shields.io/github/actions/workflow/status/jqssun/android-se-access/apk.yml\" alt=\"build\" /></a>\n<a href=\"https://github.com/jqssun/android-se-access/blob/master/LICENSE\"><img src=\"https://img.shields.io/github/license/jqssun/android-se-access\" alt=\"license\" /></a>\n<a href=\"https://github.com/jqssun/android-se-access/issues\"><img src=\"https://img.shields.io/github/issues/jqssun/android-se-access\" alt=\"issues\" /></a></p>\n<p>A module to explicitly give trusted apps access to the secure element (eSE) by using a safer application ID based implementation, regardless of the ARF configuration on the eUICC.</p>\n<h2>Compatibility</h2>\n<ul>\n<li>Android 10+</li>\n<li>Rooted devices with Xposed framework installed (e.g. LSPosed)</li>\n<li>Access can be granted to any of the following Local Profile Assistant (LPA) apps:\n<ul>\n<li>(OEM) <a href=\"https://play.google.com/store/apps/details?id=com.google.android.euicc\">com.google.android.euicc</a></li>\n<li>(FOSS) <a href=\"https://f-droid.org/en/packages/chat.jmp.simmanager/\">chat.jmp.simmanager</a></li>\n<li>(FOSS) <a href=\"https://gitea.angry.im/PeterCxy/OpenEUICC\">im.angry.easyeuicc</a></li>\n</ul>\n</li>\n</ul>\n<h2>Implementation</h2>\n<p>On Android, eUICC APIs are by default restricted to whitelisted apps. This makes sense because most eUICC chips are integrated to the device. If someone wants to access the chip, say for instance to provision a profile, they generally need to do so through a <a href=\"https://source.android.com/docs/core/connect/esim-overview#making_an_lpa_app\">Local Profile Assistant (LPA) app</a>, which can either be</p>\n<ul>\n<li><a href=\"https://source.android.com/docs/core/connect/esim-overview#making_an_lpa_app\">a system app that provides EuiccService</a> (in the case of an integrated eUICC), or</li>\n<li><a href=\"https://source.android.com/docs/core/connect/uicc#arf\">a carrier app signed by a certificate</a> whose hashes match the <a href=\"https://source.android.com/docs/core/connect/uicc#validation\">ARF/ACCF stored in the eUICC</a></li>\n</ul>\n<p>In the case of a removable eSIM (such as those from <a href=\"https://sysmocom.de/products/sim/sysmocom-euicc/\">sysmocom</a>, <a href=\"https://www.estk.me/\">estk.me</a> or <a href=\"https://esim.me/\">esim.me</a>), the options are limited as they do not have control over device firmware. Users also have to rely heavily on carrier support for their apps as the ARF is baked into the eUICC itself.</p>\n<p>However, there is a caveat. Probably to faciliate Android vendor testing, full access to the eUICC can <em>also</em> be granted if the ROM firmware is built with a debuggable flag, i.e. <code>ro.debuggable=1</code>, whilst configured to accept all channel access requests, <code>persist.service.seek=fullaccess</code>. Effectively, this translates to setting <code>mUseAra</code> and <code>mUseArf</code> fields to false while granting <code>mFullAccess</code> in <code>com.android.se.security.AccessControlEnforcer</code> according to <a href=\"https://android.googlesource.com/platform/packages/apps/SecureElement/+/refs/heads/main/src/com/android/se/security/AccessControlEnforcer.java\">the sources</a>.</p>\n<p>A previous version of this module enables eSE access to third-party apps by exactly patching these 3 flags in <code>AccessControlEnforcer</code>. However the approach is more of a one-size-fits-all solution that does not disciminate potentially malicious apps from legitimate ones, posing a significant risk when enabled.</p>\n<p>Tracing <a href=\"https://android.googlesource.com/platform/packages/apps/SecureElement/+/refs/heads/master/src/com/android/se/Terminal.java\">the source code</a> to see how access can be more granularly provided, I found that app eligibility eventually comes down to the check at <code>isPrivilegedApplication</code> method in <code>com.android.se.Terminal</code>. There is no need to touch <code>AccessControlEnforcer</code> at all, as the check directly operates on one of the default steps intended for carrier applications.</p>\n<p>Therefore, this module instead modifies the response there without any drastic changes in terms of how <code>AccessControlEnforcer</code> behaves. Of course, it is also possible to be even more specific with the patching, down to the exact application signature rather than using application ID, but this may be a bit more cumbersome to support and maintain.</p>\n<p>For users that are still not entirely convinced with how secure this is, you are welcome to cut down the list even further and include your own application ID in your build. Since Android by default does not allow app signatures to be overwritten duing updates, you should be protected so long as your custom LPA app is signed properly \U0001F44D</p>\n"
IssueTracker: ""
Name: Secure Element Access
SourceCode: https://github.com/Xposed-Modules-Repo/io.github.jqssun.seaccess
Summary: Enable access to secure element for trusted apps.
WebSite: ""
