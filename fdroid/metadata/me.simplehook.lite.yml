AuthorName: ""
Categories:
    - Xposed
CurrentVersion: 1.3.4
CurrentVersionCode: 24030222
Description: "<p><strong>这里是SimpleHook的hook部分代码</strong></p>\n<h1>simpleHook使用说明</h1>\n<p><strong>中文文档</strong>|<a href=\"README_EN.md\">English</a></p>\n<blockquote>\n<p><a href=\"https://wwp.lanzoub.com/b0177tlri\">simpleHook.apk</a>(密码：simple)</p>\n<p>TG交流群: @simpleHook</p>\n<p>本软件主打简单，如名字一样，如果你追求更复杂的hook操作，推荐使用 <a href=\"https://github.com/Xposed-Modules-Repo/me.jsonet.jshook\">jsHook（你可以实现更复杂的功能）</a>、<a href=\"https://github.com/Mocha-L/QuJing\">曲境（电脑端浏览器操作）</a>；如果你追求更多的扩展功能，推荐使用算法助手等等类似应用</p>\n<p>功能概述：自定义返回值、参数值等，记录常见各种加密算法、toast、dialog、popupwindow、JSONObject创建增加等</p>\n</blockquote>\n<h2>1. 功能说明</h2>\n<h3>页面介绍</h3>\n<p><strong>首页</strong></p>\n<img src=\"images\\main_home_screenshot.png\" width = \"200\" />\n<p>点击加号，可添加配置，点击添加配置进入下面页面</p>\n<p><strong>配置页面</strong></p>\n<img src=\"images/config_screenshot.png\" width = \"200\" />\n<p>点击‘搜索样式’图标，可进入AppList页面，进行选择应用</p>\n<p>点击‘下载样式’图标，可保存配置</p>\n<p>点击右下角加号，可在弹出窗口填写配置</p>\n<img src=\"images\\config_dialog_screenshot.png\" width = \"200\" />\n<p>有多种模式可以选择，输入类名前建议了解设置页面（smali to config），它可以简化填写</p>\n<p><strong>扩展页面</strong></p>\n<img src=\"images\\main_extension_screenshot.png\" width = \"200\" />\n<p><strong>具体功能</strong></p>\n<img src=\"images\\extension_main_features_shot.png\" width = \"200\" />\n<p>点击“播放样式”按钮，可打开悬浮窗（需要授予悬浮窗权限），然后打开目标应用，可以显示一些信息（开启了打印参数值、返回值、扩展页面大部分功能）</p>\n<p>悬浮窗</p>\n<img src=\"images\\main_extension_print_dialog.png\" width = \"200\" />\n<h2>2.自定义Hook编写规则</h2>\n<p>下面是编写规则：（你可以下载*<a href=\"https://github.com/littleWhiteDuck/HookTest/releases\">HookTest.apk</a>*，此App应用了所有情况，并内附有配置）</p>\n<blockquote>\n<p>使用前请先了解设置页【smali转配置】，它可以简化你的操作(配合MT管理器等逆向分析软件)</p>\n</blockquote>\n<h3>简要的基本介绍</h3>\n<ul>\n<li>\n<p>支持Java语法和Smali语法填写配置信息</p>\n<pre lang=\"java\"><code>// java\nme.simplehook.MainActivty\n// smali\nLme/simplehook/MainActivity; //一定要有 --&gt; ; &lt;--\n</code></pre>\n</li>\n<li>\n<p>支持基本类型和其它类型参数</p>\n<pre lang=\"java\"><code>// 类型 主要用于填写参数类型和变量类型\n// 基本类型你可以使用java语法这样填\nboolean int long short char byte float double\n// 基本类型你也可以使用smali语法这样填\nZ I J S C B F D\n// 其他类型你可以使用java语法这样填\njava.lang.String android.content.Context \n// 其他类型你也可以使用smali语法这样填\nLjava/lang/String; Landroid/content/Context; //一定要有 --&gt; ; &lt;--\n</code></pre>\n</li>\n</ul>\n<h3>结果值的填写规则</h3>\n<blockquote>\n<p>此处应注意，本软件不像其他软件一样需要填写返回值、参数值类型，本软件并不需要，你只需要<strong>按照规则填写</strong>，自动判断</p>\n</blockquote>\n<h4>2.1. 基本类型</h4>\n<table>\n<thead>\n<tr>\n<th>类型(java、smali)</th>\n<th>值的例子</th>\n<th>注意事项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>布尔值(boolean、Z)</td>\n<td>true、false</td>\n<td></td>\n</tr>\n<tr>\n<td>整数(int、I)</td>\n<td>1、2、3</td>\n<td></td>\n</tr>\n<tr>\n<td>长整型(long、J)</td>\n<td>1l、120000L、123456l</td>\n<td>要注意：数字 + L</td>\n</tr>\n<tr>\n<td>短整型(short、S)</td>\n<td>1short、2short</td>\n<td>要注意：数字 + short</td>\n</tr>\n<tr>\n<td>字符(char、C)</td>\n<td>195c</td>\n<td>要注意：符合char类型的字符 + c</td>\n</tr>\n<tr>\n<td>字节(byte、B)</td>\n<td>2b、3b</td>\n<td>要注意：符合byte类型的字符 + b</td>\n</tr>\n<tr>\n<td>单浮点(float、F)</td>\n<td>2f、3f、3.0f</td>\n<td>要注意：数字 + f</td>\n</tr>\n<tr>\n<td>双浮点(double、D)</td>\n<td>2d、3d、3.0d</td>\n<td>要注意：数字 + d</td>\n</tr>\n</tbody>\n</table>\n<h4>2.2. null</h4>\n<blockquote>\n<p>其他类型只能返回null(字符串除外)，null</p>\n</blockquote>\n<h4>2.3. 字符串</h4>\n<h5>2.3.1 一般情况</h5>\n<blockquote>\n<p>不符合基本类型和null的全部转化为字符串类型</p>\n</blockquote>\n<h5>2.3.2 特殊情况</h5>\n<table>\n<thead>\n<tr>\n<th>特殊的字符串</th>\n<th>值的例子</th>\n<th>注意事项</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数字</td>\n<td>111s, 2002s</td>\n<td>常见于 “111111” 这种，但是本软件你需要在数字后面加入s，如果你不加s，会被转成数字，可能导致目标应用崩溃</td>\n</tr>\n<tr>\n<td>布尔</td>\n<td>trues、falses</td>\n<td>常见于 “true” 、“false” 这种，但是本软件你需要在布尔值后面加入s，如果你不加s，会被转成布尔值，可能导致目标应用崩溃</td>\n</tr>\n<tr>\n<td>null</td>\n<td>nulls</td>\n<td>常见于 “null”这种，但是本软件你需要在null后面加入s，如果你不加s，会被转成null，可能导致目标应用空指针</td>\n</tr>\n<tr>\n<td>空字符串</td>\n<td>英文单词’empty’ 或者中文汉字’空’</td>\n<td>如果你直接填空，将无法保存配置，这样做是为了预防你在使用时不填修改值导致无法正常Hook</td>\n</tr>\n</tbody>\n</table>\n<h5>2.3.3 随机文本返回值</h5>\n<blockquote>\n<p>仅用于返回值，返回值填写下面json代码</p>\n<pre lang=\"json\"><code>   {\n\t    &quot;random&quot;: &quot;abcdefgh123456789&quot;,\n\t    &quot;length&quot;: 9,\n\t    &quot;key&quot;: &quot;key&quot;,\n\t    &quot;updateTime&quot;: 100,\n\t    &quot;defaultValue&quot;: &quot;&quot;\n    }\n</code></pre>\n<p>上述json格式代码介绍：\nrandom：字符串，填写随机文本由哪些字符组成</p>\n<p>​\tlength：整数，代表需要生成多长的随机文本</p>\n<p>​\tkey：字符串，唯一识别码，可以随便填写，但是一个软件中用到多个随机返回值时需要填不一样的</p>\n<p>​\tupdateTime：整数，代表着间隔多长时间更新一下随机文本，单位秒， -1代表每次都更新</p>\n<p>​\tdefaultValue：非必填项</p>\n</blockquote>\n<h2>3.具体的hook模式</h2>\n<h4>hook返回值</h4>\n<pre lang=\"java\"><code>//  例如1\n  import simple.example;\n  Class Example{\n    public static boolean isFun() {\n      boolean result = true;\n      ...\n       ...\n      return result\n    }\n  }\n  /*\n  模式选择 Hook返回值\n  类名应填：simple.example.Example\n  方法名应填：isFun\n  参数类型应填：（此处留空，因为没有参数）\n  修改值应填：true 或者 false\n  */\n\n/*\n多个参数参数类型的填法(用英语逗号分开，参数类型支持数组)：\nboolean,int,android.content.Context\n*/\n// 例如2\n  import simple.example;\n  class Example{\n    public static String isFun(Sring str, Context context, boolean b) {\n      String result = str;\n      ...\n       ...\n      return result\n    }\n  }\n/*\n  模式选择 Hook返回值\n  类名应填：simple.example.Example\n  方法名应填：isFun\n  参数类型应填:\n    java语法： java.lang.String,android.content.Context,boolean   (使用参数间使用英文逗号分开，仅一个参数不需要加逗号)\n    smali语法：Ljava/lang/String;,Landroid/content/Context;,Z\n  修改值应填：是个字符串 （应符合结果值的填写规则，不需要加引号）\n*/\n</code></pre>\n<h4>hook返回值+</h4>\n<blockquote>\n<p>此功能可以将json转为对象(使用Gson)，你如果不知道这个对象的Json格式是什么样子的，可以使用【记录返回值】功能，复制返回值即可。这个功能并不是万能的，不适用所有情况，简单的数据类应该是没有问题的，暂不支持数组。</p>\n<p>模式：hook返回值+</p>\n<p>返回值的类名：填返回值的类名</p>\n<p>修改值：填json代码，如</p>\n<pre lang=\"json\"><code>{&quot;isHook&quot;:false,&quot;level&quot;:10000}\n</code></pre>\n<p>举个例子：</p>\n<pre lang=\"java\"><code>import simple.example;\n\n// 数据类\npublic class UserBean {\n   private boolean isHook;\n   private int level;\n\n   public UserBean(boolean isHook, int level) {\n       this.isHook = isHook;\n       this.level = level;\n   }\n}\n\npublic class Example{\n   public static UserBean isFun() {\n     UserBean userBean = new UserBean(true, 10);\n     ...\n      ...\n     return userBean\n   }\n }\n/*\n假如hook isFun的返回值\n模式：hook返回值+\n类名：simple.example.Example\n方法名：isFun\n参数类型：\n返回值的类名：simple.example.UserBean\n结果值：{&quot;isHook&quot;:false,&quot;level&quot;:10000}\n*/\n\n</code></pre>\n</blockquote>\n<h4>hook参数值</h4>\n<pre lang=\"java\"><code>// 类型值同 hook返回值类型\n//特殊用法，如下面一段代码\npublic boolean isModuleLive(Context context, String str, int level){\n  \n    retrun true\n}\n//如果你只想要hook level的值，你可以在修改值那一栏向下面这样填\n,,99\n//如果你只想要hook str的值，你可以在修改值那一栏向下面这样填\n,啦啦啦,\n//如果你只想要hook str、level的值，你可以在修改值那一栏向下面这样填\n,啦啦啦,99\n//如果你想要全部hook，你可以在修改值那一栏向下面这样填\nnull,啦啦啦,99 // context为null也许导致闪退\n/*\n多个参数参数类型的填法(用英语逗号分开)：\nandroid.content.Context,jave.lang.String,int\n或者如下填写\nLandroid/content/Context;,Ljave/lang/String;int\n*/\n</code></pre>\n<h4>中断执行</h4>\n<pre lang=\"java\"><code>// 此模式会拦截方法执行\n// 如hook返回值或者hook参数值一样填，不需要填写返回值、参数值\npublic void printString() {\n    System.out.println(&quot;start&quot;);\n    testBreakMethod();\n    System.out.println(&quot;end&quot;);\n\n    /*\n      输出结果为\n      start\n      end\n\n      test Break Mode 没有被输出\n    */\n}\n\n// 假如:此方法被中断\npublic void testBreakMethod() {\n    System.out.println(&quot;test Break Mode&quot;)\n}\n</code></pre>\n<h4>Hook所有同名方法</h4>\n<pre lang=\"java\"><code>/*\n  Hook一个类所有同名方法，参数类型填写 * 即可\n*/\n</code></pre>\n<h4>Hook一个类中所有方法</h4>\n<pre lang=\"java\"><code>/*\n  Hook一个类所有方法，方法名填写 * 即可；参数类型可随意填写，有些h不可为空\n*/\n</code></pre>\n<h4>构造方法</h4>\n<pre lang=\"java\"><code>// 方法名填写：&lt;init&gt;\nimport simple.example;\npublic class Example{\n  int a;\n  int b;\n  public Example(int a, boolean b) {\n    this.a = a;\n    this.b = b\n  }\n}\n// Hook模式，根据自己的需求选择，一般为hook参数值/记录参数值，其他模式可能造成软件闪退\n/*\n  方法名填写：&lt;init&gt;\n  例如修改两个参数值\n    类名填写：simple.example.Example\n    方法名填写： &lt;init&gt; \n    参数类型填写：int,int\n    结果值填写：88,99\n */\n</code></pre>\n<h4>HOOK静态变量</h4>\n<pre lang=\"java\"><code>import simple.example;\npublic class Example{\n  public static boolean isTest = false;\n}\n\nimport simple.example;\npublic class MainActivity extends Acitvity {\n  @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        initData();\n        initView();\n    }\n\n    private void initData(){\n      Example.isTest = false;\n    }\n\n    private void initView() {\n      //你想要修改 isTest为true,所以你应当再这个变量被赋值后再去hook\n      System.out.println(Example.isTest); \n    }\n}\n// 具体的值只支持基本类型，和字符串\n// 无需填写变量类型；要符合[结果值]填写规则\n/*\n  模式选择 Hook静态变量\n  hook点：after/before  根据需要填写，默认after\n  类名应填：simple.example.MainActivity;\n  方法名应填: initData\n  参数类型应填：（什么都是不填，因为这个方法没有参数）\n  变量所在类名：simple.example.Example\n  变量名应填：isTest\n  修改值应填：true/false\n*/\n</code></pre>\n<h4>HOOK实例变量</h4>\n<pre lang=\"java\"><code>import simple.example;\npublic class UseBean {\n    private boolean isHook;\n    private int level;\n\n    public UseBean(boolean isHook, int level) {\n        this.isHook = isHook;\n        this.level = level;\n    }\n\n    public boolean isHook() {\n        return isHook;\n    }\n\n    public void setHook(boolean hook) {\n        isHook = hook;\n    }\n\n    public int getLevel() {\n        return level;\n    }\n\n    public void setLevel(int level) {\n        this.level = level;\n    }\n}\n\nimport simple.example;\npublic class MainActivity extends Acitvity {\n  private User user;\n  @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        initData();\n        initView();\n    }\n\n    private void initData(){\n      user = new User(true, 100);\n    }\n\n    private void initView() {\n      //你想要修改isHook、level,所以你应当再这个变量被赋值后再去hook\n      System.out.println(user.isHook()); \n      System.out.println(user.getLevel()); \n    }\n}\n// 具体的值只支持基本类型，和字符串\n// 无需填写变量类型；要符合[结果值]填写规则\n/*\n  模式选择 Hook变量\n  hook点：after/before  根据需要填写，默认是after\n  类名应填：simple.example.UseBean;\n  方法名应填: &lt;init&gt;   // &lt;init&gt;  表示构造方法\n  参数类型应填：boolean,int\n  变量名应填：isHook\n  修改值应填：true/false\n\n  实例变量/成员变量：不支持像静态变量一样跨类hook，只能在本类的某个方法执行后，再去hook变量值\n*/\n</code></pre>\n<h4>记录参数值</h4>\n<blockquote>\n<p>方法的参数值会被记录，前往记录页面可以查看、\n若参数是数组或者list会被转成json格式</p>\n</blockquote>\n<h4>记录返回值</h4>\n<blockquote>\n<p>方法的返回值会被记录，前往记录页面可以查看\n若结果是数组或者list会被转成json格式</p>\n</blockquote>\n<h4>记录参返</h4>\n<blockquote>\n<p>方法的参数值、返回值会被一同记录，前往记录页面可以查看\n若结果是数组或者list会被转成json格式\n若参数是数组或者list会被转成json格式</p>\n</blockquote>\n<h4>扩展Hook</h4>\n<blockquote>\n<p>切记<strong>打开总开关</strong>\n功能请前往app查看</p>\n</blockquote>\n<h2>4.常见问题(FAQ)</h2>\n<h3>1.hook没有效果</h3>\n<blockquote>\n<ul>\n<li>可看框架日志，是否有报错等</li>\n<li>储存文件更新配置某些情况下需要手动刷新，开启、关闭、编辑保存即可刷新</li>\n<li>请授予所需权限（android11以下：储存权限，android11及以上：ROOT权限）</li>\n</ul>\n</blockquote>\n<h3>2.什么是smali转配置</h3>\n<blockquote>\n<p>开启此实验功能后，配置页面顶部会增加‘粘贴板’图标，点击可将应用调用代码或签名，转化为配置（防止手动输入错误），增加配置后你需要手动选择合适的模式以及结果值\n调用代码例子：</p>\n<pre lang=\"smali\"><code> iget v0, p0, Lme/duck/hooktest/bean/UseBean;-&gt;level:I\n invoke-virtual {v0}, Lme/duck/hooktest/bean/UseBean;-&gt;isHook()Z\n</code></pre>\n<p>方法签名、字段签名例子：</p>\n<pre lang=\"smali\"><code>Lme/duck/hooktest/bean/UseBean;-&gt;level:I\nLme/duck/hooktest/bean/UseBean;-&gt;isHook()Z\n</code></pre>\n<p>上述可在MT管理器导航中长按字段或方法选择<strong>复制签名</strong>或者<strong>查找调用</strong></p>\n</blockquote>\n<h3>3.为什么目标应用运行很慢</h3>\n<blockquote>\n<p>请关闭不必要的扩展HOOK和记录参数、返回值功能, 例如：md5、base64等，这些功能会产生大量的Log</p>\n</blockquote>\n<h3>4.</h3>\n<h3>5.</h3>\n<h3>6.什么是hook点</h3>\n<blockquote>\n<p>hook静态变量、实例变量支持手动填写hook点，hook点就是在方法执行前hook还是在方法执行后hook</p>\n<p>before：方法执行前hook;\nafter：方法执行后hook</p>\n</blockquote>\n<h3>7.什么是删除遗留配置</h3>\n<blockquote>\n<p>当你卸载本应用或者清除数据时，目标应用配置文件仍然可能保存在储存文件中</p>\n<ol>\n<li>/data/local/tmp/simpleHook/目标应用包名/config/</li>\n<li>/storage/emluated/0/Android/data/目标应用包名/simpleHook/config/</li>\n</ol>\n<p>这个功能就是遍历所有的应用目录并删除无用的配置(本应用内未显示其配置)</p>\n<p>因为需要遍历所有应用会比较慢</p>\n</blockquote>\n"
IssueTracker: ""
Name: SimpleHook
SourceCode: ""
Summary: ""
WebSite: ""
